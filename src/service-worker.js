/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { BackgroundSyncPlugin } from 'workbox-background-sync'
import { clientsClaim, setCacheNameDetails  } from 'workbox-core';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, NetworkOnly } from 'workbox-strategies';

setCacheNameDetails({
  prefix: 'magellan-cache',
  suffix: 'v1'
})

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

 // Static resources
registerRoute(
  ({url}) => url.origin === self.location.origin,
  new StaleWhileRevalidate()
);

const bgSyncHttpMethods = ['POST', 'PUT', 'PATCH', 'DELETE'];
const noBgSyncHttpMethods = ['GET', 'HEAD'];

const bgSyncPlugin = new BackgroundSyncPlugin('magellanQueue', {
  maxRetentionTime: 72 * 60,  // Retry for max of 72 Hours (specified in minutes)
})

 // Dynamic resources with backgorund sync, no caching
for (let method of bgSyncHttpMethods) {
  registerRoute(
    ({ url }) => url.origin !== self.location.origin,
    new NetworkOnly({
      plugins: [bgSyncPlugin]
    }),
    method
  );
}

// Dynamic resources with caching, no background sync
for (let method of noBgSyncHttpMethods) {
  registerRoute( 
    ({ url }) => url.origin !== self.location.origin,
    new NetworkFirst(),
    method
  );
}
